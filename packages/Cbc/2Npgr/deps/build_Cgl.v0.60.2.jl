using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libCgl"], :libCgl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Cgl_jll.jl/releases/download/Cgl-v0.60.2+4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.aarch64-linux-gnu-cxx03.tar.gz", "a428f1bc6e838e7c313a3a263ccc28c50d9ff5a0271f85511802a2a6bdd0f5ef"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.aarch64-linux-gnu-cxx11.tar.gz", "449c5c80d29ce7ace12bbef597d1bdc7f9a172a0c1c31f2be3e19fc86766ac6f"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.aarch64-linux-musl-cxx03.tar.gz", "c444e8b1e945140d1a3b43c47234b8a69cfd3cbf0a77b842e74acc2d9ba40e7f"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.aarch64-linux-musl-cxx11.tar.gz", "daf6b7474b2df6e7fc7fd6c5e0c0c9d26dedc6da55b2c882de85223db5f8c353"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.armv7l-linux-gnueabihf-cxx03.tar.gz", "a2c3229a4a7485cf6260b94aea56d3b4d887c6207c72a12c222a1e2ca6787f78"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.armv7l-linux-gnueabihf-cxx11.tar.gz", "fb8fa517178b9bcef4c822a2aaeb9b4fce3f724c426b939282569ee150f23a2a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.armv7l-linux-musleabihf-cxx03.tar.gz", "1d04a8c0ecac152a089d0dbfc8f071a422531d6cbbfbaf65ed304c6a6758d531"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.armv7l-linux-musleabihf-cxx11.tar.gz", "0024ea1c3bfff26d1850d4b4581c76f667325af196e68f0229a7c33b7183a155"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.i686-linux-gnu-cxx03.tar.gz", "97fdb8090598cdcda6dd193ced6b6d1530040a4be89269bb730c4caf20fced3d"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.i686-linux-gnu-cxx11.tar.gz", "431c633dae09ef0877a066b175d66606a38ff22ba7e3f66e78af914f8cfff0e4"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.i686-linux-musl-cxx03.tar.gz", "82673d2f455f9f319ed6b91c343b09525c507d1932663eacbc6f0ac4d67ae6d9"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.i686-linux-musl-cxx11.tar.gz", "2b67a6ee172e72c0aac20bc3994f4d37e79a7394d89339ee45d87f0057095a13"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.i686-w64-mingw32-cxx03.tar.gz", "f1b28782f8b3b433f61d0517f4709b5a5d792250a5835dcc95a5de1f6a891438"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.i686-w64-mingw32-cxx11.tar.gz", "903f956e36ed6751c596333d33abe40d0bc3ee74a6e3eb33b9073cbacb8aeb18"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-apple-darwin14-cxx03.tar.gz", "320ca0d97dfb0860626884bf84551b1c1aae91330ba12c8a4ca50c0039140ac9"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-apple-darwin14-cxx11.tar.gz", "b7c8da71876be0f983634c45b7c25a4c5d5bf80fac808e9004df598aeca0b0b8"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-linux-gnu-cxx03.tar.gz", "a74ed30d7363fa32d311befe0bdfc3fcf0b1d965d20c5758c3e7a86f1c958621"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-linux-gnu-cxx11.tar.gz", "a33cb719185f273636485cb7e7bbe5e8179db2f6885d5aa8bb2a9385a095cd71"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-linux-musl-cxx03.tar.gz", "6373352c391587ee49ef497ced3c4cded02f6fcb75022c5bb07321da36d31d70"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-linux-musl-cxx11.tar.gz", "73bc41767aacf746640973e988032850740b432d44704e505f63fccf22c6f4a1"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-w64-mingw32-cxx03.tar.gz", "c0ab409de6ee093d9f5665f39b5d2bc1ba2cd9cd349c48b54d4ad5b809fa41e3"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Cgl.v0.60.2.x86_64-w64-mingw32-cxx11.tar.gz", "bafb7c77468627fe2fa12342833becf306d32df603c5a59b8dc8310286e28b60"),
)

# Install unsatisfied or updated dependencies:
# We added `, isolate=true` as otherwise, it would segfault when closing `OpenBLAS32`,
# probably because it is conflicting with Julia openblas.
unsatisfied = any(!satisfied(p; verbose=verbose, isolate=true) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end
