if VERSION >= v"1.3" && !haskey(ENV, "JULIA_GLPK_LIBRARY_PATH")
    exit()  # Use GLPK_jll instead.
end

using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libglpk"], :libglpk),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/GLPK_jll.jl/releases/download/GLPK-v4.64.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/GLPK.v4.64.0.aarch64-linux-gnu.tar.gz", "5fd8dbb8793f4169a1dfe61e84382dfcc9c7c472f9a67bccf619612ac8eb9bde"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/GLPK.v4.64.0.aarch64-linux-musl.tar.gz", "7b9b11348ab06085e137eeed6956f1ee01e3a396f2ee36953eed469814310d0f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/GLPK.v4.64.0.armv7l-linux-gnueabihf.tar.gz", "c7cd3c2863da37b440246e4c1a64095308790873126f13de7e0c5f348c96c51c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/GLPK.v4.64.0.armv7l-linux-musleabihf.tar.gz", "5c339702a738896f6e0a8526f0b6837fce2c1f7fb26a7416a34f7b0b6e20056e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/GLPK.v4.64.0.i686-linux-gnu.tar.gz", "117d1e82ff562fd23f3db2d317f8fcbcb9950cb8845d9115b4138950a0e6d217"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/GLPK.v4.64.0.i686-linux-musl.tar.gz", "50f2385c68998941ea885c407d397bba3f3893cee108f8f2c99e78570e2a7731"),
    Windows(:i686) => ("$bin_prefix/GLPK.v4.64.0.i686-w64-mingw32.tar.gz", "93f7f3dfb879104d1bc432f26bb95e4c4e8b0899e9efc10d2ac07ee056e6de69"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/GLPK.v4.64.0.powerpc64le-linux-gnu.tar.gz", "7e70cfcab425e0c84f9e38b0f3dfbeb522ee73c809a2050efd3b838e18a00cac"),
    MacOS(:x86_64) => ("$bin_prefix/GLPK.v4.64.0.x86_64-apple-darwin14.tar.gz", "1ac7e16a51bfc377687ecdf935b6b6d8f7c067186b6a8a80e1da0aff7c7acabc"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/GLPK.v4.64.0.x86_64-linux-gnu.tar.gz", "272fc8d812f4ca1023b77af6a85b02a89695cc6daf14318eba41b456de2eb746"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/GLPK.v4.64.0.x86_64-linux-musl.tar.gz", "fe6be21fe113704ad4a4ac74dc030f57d32595277ed5a019fe09290891846e68"),
    FreeBSD(:x86_64) => ("$bin_prefix/GLPK.v4.64.0.x86_64-unknown-freebsd11.1.tar.gz", "0f4f2204d4789bbbbb8349429114d86eee27d3df7b6d3312292159771d99e5a6"),
    Windows(:x86_64) => ("$bin_prefix/GLPK.v4.64.0.x86_64-w64-mingw32.tar.gz", "99baca281baf7c8f9e55a6686f98e3d12575d9a760494d19556b22ece9cc109b"),
)

this_platform = platform_key_abi()

custom_library = false
if haskey(ENV, "JULIA_GLPK_LIBRARY_PATH")
    custom_products = [
        LibraryProduct(
            ENV["JULIA_GLPK_LIBRARY_PATH"],
            product.libnames,
            product.variable_name
        )
        for product in products
    ]
    if all(satisfied(p; verbose=verbose) for p in custom_products)
        products = custom_products
        custom_library = true
    else
        error("Could not install custom libraries from $(ENV["JULIA_GLPK_LIBRARY_PATH"]).\nTo fall back to BinaryProvider call delete!(ENV,\"JULIA_GLPK_LIBRARY_PATH\") and run build again.")
    end
end

if !custom_library
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)

    dl_info = choose_download(download_info, this_platform)
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        evalfile("build_GMP.v6.1.2.jl")  # We do not check for already installed GMP libraries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
